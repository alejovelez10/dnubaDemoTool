<%= nested_form_for(@actum, local: true) do |form| %>
  <% if actum.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(actum.errors.count, "error") %> prohibited this actum from being saved:</h2>

      <ul>
      <% actum.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>


  <div class="field">
    <%= form.label :fecha %><br>
    <%= form.date_select :fecha, class: "form form-control " %>
  </div>
  <br><br>

  <div class="row">
    <div class="col-md-4" style="margin-left: 187px;">
      <p align="center">Nombre Del Encargado</p>
        <div class="input-group">
            <span class="input-group-addon"><i class="fas fa-user" style = "color: #f1f1f1;" ></i></span>
            <%= form.select :employed_id,get_employed.map { |u| [u.name, u.id] },{ include_blank: false },{ class: 'form form-control'}%>
        </div>
    </div>
    <br>

    <div class="col-md-4" style="float: right;">
      <p align="center">Nombre Del que recibe</p>
        <div class="input-group">
            <span class="input-group-addon"><i class="fas fa-user" style = "color: #f1f1f1;" ></i></span>
            <%= form.select :employed_id,get_employed.map { |u| [u.name, u.id] },{ include_blank: false },{ class: 'form form-control' }%>
        </div>
    </div>
  </div>

  <div class="elements">
    <%= form.fields_for :items_tools do |items|  %>
       <div class="col-md-12 elements" style="padding-left: 0px;">
        <div class="row">
              <div class="col-md-4">  
                <label>Herramienta</label>
                <div class="input-group">
                  <span class="input-group-btn">
                   <%= items.link_to_remove class: "btn btn-danger", style: "border-radius: inherit;" do %>
                     <i class="fa fa-trash" aria-hidden="true"></i>
                   <% end %>
                  </span>
                  
                    <%= items.select :tools_id,get_tool.map { |u| [u.name, u.id] },{ include_blank: false },{ class: 'form form-control', id: "hola" }%>
                </div>
             </div>
        

              <div class="col-md-3">
                <label>Cantidad</label>
                <%= items.number_field :quantity, class: "form form-control", :placeholder => ""  %>
              </div>
              <br>

          </div>
            <%= items.hidden_field :actum_id %>  
        </div>
        <br>
    <% end %>
    <div class="col-md-12" style="margin-top: 50px; padding: 0px;">
    <%= form.link_to_add "Agregar", :items_tools, :class => 'btn btn-primary', style: "margin-top: 5px !important "  %>

    </div>
</div>
<br>
  <div class="field">
    <%= form.label :Observaciones %><br>
    <%= form.text_area :description, class: "form form-control" ,:rows => 7 , id: "cambio1" %>
  </div>

  <br>

  <div class="col-md-5" style="padding: 0px; float: left;  resize: none;">
      <%= form.label :Firma_de_Entrega %><br>
      <%= form.text_area :signature_delivery, class: "form form-control",  id: "txtSignature",:rows => 8 %>
      <br>
      <p align="center" id="selector1" style="cursor: pointer;">Selector <span class="badge badge-pill badge-primary">1</span></p>
  </div>

  <div class="col-md-5" style="padding: 0px; float: right;  resize: none;">
      <%= form.label :Firma_Solicitada %><br>
      <%= form.text_area :signature_requests, class: "form form-control", id: "txtSignature2",:rows => 8 %>
      <br>
      <p align="center" id="selector2" style="cursor: pointer;">Selector <span class="badge badge-pill badge-primary">2</span></p>
  </div>
  <br>

  <div class="col-md-3" style="padding: 0px; margin-top: 290px;">
    <label>Selector</label>
    <input type="text" name="" id ="selector" class="form form-control">
  </div>
  
    <div class="col-md-12" style="margin-top: 100px; padding: 0px;"> 
        <%= form.submit "Guardar", class: "btn btn-primary", style: "margin-top: 5px !important ", id: "hola"  %>
  </div>
  <br><br>
<% end %>

<script>

$('.elements').on('change', 'select', function() {
  
  var cambio =  $(this).val();
  console.log(cambio);
  
  that = this; 
 
    $.get("/pruba/" + cambio, function(data, status){

      console.log($(that).parent().parent().next().children('input'))
      $(that).parent().parent().next().children('input').val(data.prince);

        
    });
  


});

$("#selector1").click(function(event) {
    $("#selector").val(1)
});

$("#selector2").click(function(event) {
    $("#selector").val(2)
});



 /* $( ".buscador" ).select2({
    theme: "bootstrap",
    language: "en"
  });*/

</script>

<script type="text/javascript" id="myscript_1">
    

function Exception(txt) {
  print("Exception: " + txt);
}
function print(txt) {
  var txtDisplay = document.getElementById("txtDisplay");
  if("CLEAR" == txt) 
  {
    txtDisplay.value = "";
  }
  else 
  {
    txtDisplay.value += txt + "\n";
    txtDisplay.scrollTop = txtDisplay.scrollHeight; // scroll to end
  }
}
      
var wgssSignatureSDK = null;
var sigObj = null;
var sigCtl = null;
var dynCapt = null;

function OnLoad(callback)
{
  print("CLEAR");
  restartSession(callback);
}

function restartSession(callback) 
{
  wgssSignatureSDK = null;
  sigObj = null;
  sigCtl = null;
  dynCapt = null;
  var imageBox = document.getElementById("imageBox");
  if(null != imageBox.firstChild)
  {
    imageBox.removeChild(imageBox.firstChild);
  }
  var timeout = setTimeout(timedDetect, 1500);
  // pass the starting service port  number as configured in the registry
  wgssSignatureSDK = new WacomGSS_SignatureSDK(onDetectRunning, 8000);
  
  function timedDetect() 
  {
    if (wgssSignatureSDK.running) 
    {
      print("Signature SDK Service detected.");
      start();
    } 
    else 
    {
      print("Signature SDK Service not detected.");
    }
  }
  
  
  function onDetectRunning()
  {
    if (wgssSignatureSDK.running) 
    {
      print("Signature SDK Service detected.");
      clearTimeout(timeout);
      start();
    }
    else 
    {
      print("Signature SDK Service not detected.");
    }
  }
  
  function start()
  {
    if (wgssSignatureSDK.running) 
    {
      sigCtl = new wgssSignatureSDK.SigCtl(onSigCtlConstructor);
    }
  }
  
  function onSigCtlConstructor(sigCtlV, status)
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status)
    {
      // For production code remove dynCapt creation
      // Enable PutLicence call and replace 'licence_string' with your licence string
      
      //AgAfADeB5ivVARNXYWNvbSBTaWduYXR1cmUgU0RLAAECgQMBAmQA
       sigCtl.PutLicence("AgAfADeB5ivVARNXYWNvbSBTaWduYXR1cmUgU0RLAAECgQMBAmQA", onSigCtlPutLicence);
      //sigCtl.PutLicence(licence_string, onSigCtlPutLicence);
    }
    else
    {
      print("SigCtl constructor error: " + status);
    }
  }

  function onSigCtlPutLicence(sigCtlV, status) {
    if (wgssSignatureSDK.ResponseStatus.OK == status) {
       dynCapt = new wgssSignatureSDK.DynamicCapture(onDynCaptConstructor);
    }
    else {
      print("SigCtl constructor error: " + status);
    }
  }
  
  function onDynCaptConstructor(dynCaptV, status)
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status)
    {
      sigCtl.GetSignature(onGetSignature);
    }
    else
    {
      print("DynCapt constructor error: " + status);
    }
  }
  
  function onGetSignature(sigCtlV, sigObjV, status)
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status)
    {
      sigObj = sigObjV;
      sigCtl.GetProperty("Component_FileVersion", onSigCtlGetProperty);
    }
    else
    {
      print("SigCapt GetSignature error: " + status);
    }
  }
  
  function onSigCtlGetProperty(sigCtlV, property, status)
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status)
    {
      print("DLL: flSigCOM.dll  v" + property.text);
      dynCapt.GetProperty("Component_FileVersion", onDynCaptGetProperty);
    }
    else
    {
      print("SigCtl GetProperty error: " + status);
    }
  }
  
  function onDynCaptGetProperty(dynCaptV, property, status)
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status)
    {
      print("DLL: flSigCapt.dll v" + property.text);
      print("Test application ready.");
      print("Press 'Start' to capture a signature.");
      if('function' === typeof callback)
      {
        callback();
      }
    }
    else
    {
      print("DynCapt GetProperty error: " + status);
    }
  }
}

function Capture()
{
  if(!wgssSignatureSDK.running || null == dynCapt)
  {
    print("Session error. Restarting the session.");
    restartSession(window.Capture);
    return;
  }
  dynCapt.Capture(sigCtl, "who", "why", null, null, onDynCaptCapture);

  function onDynCaptCapture(dynCaptV, SigObjV, status)
  {
    if(wgssSignatureSDK.ResponseStatus.INVALID_SESSION == status)
    {
      print("Error: invalid session. Restarting the session.");
      restartSession(window.Capture);
    }
    else
    {
      if(wgssSignatureSDK.DynamicCaptureResult.DynCaptOK != status)
      {
        print("Capture returned: " + status);
      }
      switch( status ) 
      {
          case wgssSignatureSDK.DynamicCaptureResult.DynCaptOK:
          sigObj = SigObjV;
          print("Signature captured successfully");
          var flags = wgssSignatureSDK.RBFlags.RenderOutputBase64 |
                      wgssSignatureSDK.RBFlags.RenderColor32BPP|wgssSignatureSDK.RBFlags.RenderBackgroundTransparent;
          var imageBox = document.getElementById("imageBox");
          sigObj.RenderBitmap("png", imageBox.clientWidth, imageBox.clientHeight, 0.7, 0x00000000, 0x00FFFFFF, flags, 0, 0, onRenderBitmapBase64);
          break;
        case wgssSignatureSDK.DynamicCaptureResult.DynCaptCancel:
          print("Signature capture cancelled");
          break;
        case wgssSignatureSDK.DynamicCaptureResult.DynCaptPadError:
          print("No capture service available");
          break;
        case wgssSignatureSDK.DynamicCaptureResult.DynCaptError:
          print("Tablet Error");
          break;
        case wgssSignatureSDK.DynamicCaptureResult.DynCaptIntegrityKeyInvalid:
          print("The integrity key parameter is invalid (obsolete)");
          break;
        case wgssSignatureSDK.DynamicCaptureResult.DynCaptNotLicensed:
          print("No valid Signature Capture licence found");
          break;
        case wgssSignatureSDK.DynamicCaptureResult.DynCaptAbort:
          print("Error - unable to parse document contents");
          break;
        default: 
          print("Capture Error " + status);
          break;
      }
    }
  }
  
  function onRenderBitmapBase64(sigObjV, bmpObj, status) 
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status) 
    {
      print("base64_image:>"+bmpObj+"<");
      img = new Image();
      img.src = "data:image/png;base64," + bmpObj;

     

      if ($('#selector').val() == 1)
      {  
      $('#txtSignature').val(bmpObj);
        }
        else
        {
        $('#txtSignature2').val(bmpObj);  
      }
      if(null == imageBox.firstChild)
      {
        imageBox.appendChild(img);
      }
      else
      {
        imageBox.replaceChild(img, imageBox.firstChild);
      }
    } 
    else 
    {
      print("Signature Render Bitmap error: " + status);
    }
  }
  
}

function DisplaySignatureDetails()
{
  if(!wgssSignatureSDK.running || null == sigObj)
  {
    print("Session error. Restarting the session." );
    restartSession(window.DisplaySignatureDetails);
    return;
  }
  sigObj.GetIsCaptured(onGetIsCaptured);
  
  function onGetIsCaptured(sigObj, isCaptured, status)
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status) 
    {
      if(!isCaptured)
      {
        print("No signature has been captured yet." );
        return;
      }
      sigObj.GetWho(onGetWho);
    }
    else 
    {
      print("Signature GetWho error: " + status);
      if(wgssSignatureSDK.ResponseStatus.INVALID_SESSION == status)
      {
        print("Session error. Restarting the session.");
        restartSession(window.DisplaySignatureDetails);
      }
    }
  }
  
  function onGetWho(sigObjV, who, status) 
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status) 
    {
      print("  Name:   " + who);
      var tz = wgssSignatureSDK.TimeZone.TimeLocal;
      sigObj.GetWhen(tz, onGetWhen);
    } 
    else 
    {
      print("Signature GetWho error: " + status);
    }
  }
  
  function onGetWhen(sigObjV, when, status) 
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status) 
    {
      print("  Date:   " + when.toString() );
      sigObj.GetWhy(onGetWhy);
    } 
    else 
    {
      print("Signature GetWhen error: " + status);
    }
  }
  
  function onGetWhy(sigObjV, why, status) 
  {
    if(wgssSignatureSDK.ResponseStatus.OK == status) 
    {
      print("  Reason: " + why);
    } 
    else 
    {
      print("Signature GetWhy error: " + status);
    }
  }
  
}

function AboutBox()
{
  if(!wgssSignatureSDK.running || null == sigCtl)
  {
    print("Session error. Restarting the session.");
    restartSession(window.AboutBox);
    return;
  }
  sigCtl.AboutBox(onAboutBox);
  function onAboutBox(sigCtlV, status) 
  {
    if(wgssSignatureSDK.ResponseStatus.OK != status) 
    {
      print("AboutBox error: " + status);
      if(wgssSignatureSDK.ResponseStatus.INVALID_SESSION == status)
      {
        print("Session error. Restarting the session.");
        restartSession(window.AboutBox);
      }
    }
  }
}
    </script>





  </head>
<body onload="OnLoad()">
    <div style="width:100%">
      <table style="padding: 10px 90px;">
        <tr>
          <td rowspan="2">
            <div id="imageBox" class="boxed" style="height:50mm;width:100mm; border:1px solid #d3d3d3;" ondblclick="DisplaySignatureDetails()" title="Double-click a signature to display its details">
            </div>
          </td>
          <td  style="padding: 10px 50px;">
            <input type="button" value="Start" style="height:10mm;width:35mm" onclick="Capture()"
            title="Starts signature capture" class="btn btn-primary" />
          </td>
        </tr>
        <tr>
          <td style="padding: 10px 50px;">
            <input type="button" value="About" style="height:10mm;width:35mm" onclick="AboutBox()"
            title="Displays the Help About box" class="btn btn-primary" />
          </td>
        </tr>
      </table>
        <br/>
            <textarea cols="108" rows="15" id="txtDisplay" style="resize: none;"></textarea>
    </div>
  </body>
</html>

<style type="text/css">
  .input-group-addon{
    background: #0069d9;
    padding: 7px 11px 3px 11px;
    border-radius: 2px;
  }
</style>
